name: CI-CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest -q

  train_register_build:
    needs: test
    runs-on: ubuntu-latest
    env: # ðŸ‘‡ MLflow + DagsHub credentials
      MLFLOW_TRACKING_URI: https://dagshub.com/Tsravyareddy2002/mlops_open_source.mlflow
      MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
      MLFLOW_EXPERIMENT: iris_experiment
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Generate dataset
        run: python src/make_dataset.py

      - name: Train model
        run: python src/train.py --n-estimators 100

      - name: Evaluate model
        run: python src/evaluate.py

      - name: Register model
        run: python src/register_model.py --threshold 0.90

  docker_build_push:
    needs: train_register_build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Step to verify Docker is working on GitHub runner
      - name: Check Docker version
        run: docker --version

      # Step to set up buildx (ensures the builder is configured for multi-platform builds)
      - name: Set up Docker Buildx
        run: docker buildx create --use

      # Step to list available Docker Buildx builders
      - name: List Docker Buildx builders
        run: docker buildx ls

      - name: Auth with GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev --quiet

      # Debug step to check secret expansion and show image name
      - name: Debug image name
        run: echo "${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO }}/iris-api:latest"

      # Debug step to print the current directory and ensure we're in the correct path
      - name: Debug the current directory
        run: |
          echo "Current directory is: $(pwd)"
          ls -alh  # List files in the current directory to ensure Dockerfile is present

      # Build Docker image with buildx
      - name: Build Docker image with buildx
        run: |
          docker buildx build -f ./Dockerfile -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO }}/iris-api:latest .

      # Push the Docker image to Artifact Registry
      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO }}/iris-api:latest

      # Deploy the Docker image to Cloud Run
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy iris-api \
            --image=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO }}/iris-api:latest \
            --platform=managed \
            --region=${{ secrets.GCP_REGION }} \
            --allow-unauthenticated
